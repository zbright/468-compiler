;IR code
;LABEL main
;LINK
;STOREF 0.0001 $T1
;STOREF $T1 tolerance
;STOREF 7.0 $T2
;STOREF $T2 num
;STOREF num approx
;STOREI 0 $T3
;STOREI $T3 count
;STOREF 0.0 $T4
;STOREF $T4 diff
;STOREI 0 $T5
;STOREI $T5 enough
;LABEL label0_start
;STOREI 1 $T6
;EQ enough $T6 label0_end
;STOREI 1 $T7
;ADDI count $T7 $T8
;STOREI $T8 count
;STOREF 0.5 $T9
;DIVF num approx $T10
;ADDF approx $T10 $T11
;MULTF $T9 $T11 $T12
;STOREF $T12 newapprox
;SUBF approx newapprox $T13
;STOREF $T13 diff
;STOREF 0.0 $T14
;LE diff $T14 label1_else
;GE diff tolerance label2_else
;STOREI 1 $T15
;STOREI $T15 enough
;JUMP label2_end
;LABEL label2_else
;LABEL label2_end
;JUMP label1_end
;LABEL label1_else
;STOREF 0.0 $T16
;SUBF $T16 tolerance $T17
;LE diff $T17 label3_else
;STOREI 1 $T18
;STOREI $T18 enough
;JUMP label3_end
;LABEL label3_else
;LABEL label3_end
;LABEL label1_end
;STOREF newapprox approx
;JUMP label0_start
;LABEL label0_end
;WRITEF approx
;WRITEI count
;tiny code
var count
var enough
var newapprox
var approx
var num
var tolerance
var diff
push
push r0
push r1
push r2
push r3
jsr main
sys halt
label main
link 0
;                                // 0 0 0 0 
;                                // f f f f 

;                                // assign r0
move 0.0001 r0
move r0 tolerance
;                                // Make clean r0
;                                // 0 1 1 1 
;                                // f f f f 

;                                // 0 1 1 1 
;                                // f f f f 

;                                // assign r1
move 7.0 r1
move r1 num
;                                // Make clean r1
;                                // 1 0 2 2 
;                                // f f f f 

;                                // 1 0 2 2 
;                                // f f f f 

;                                // assign r2
move num r2
move r2 approx
;                                // 2 1 0 3 
;                                // f f f f 

;                                // assign r3
move 0 r3
move r3 count
;                                // Make clean r3
;                                // 3 2 1 0 
;                                // f f f f 

;                                // 3 2 1 0 
;                                // f f f f 

;                                // assign r0
move 0.0 r0
move r0 diff
;                                // Make clean r0
;                                // 0 3 2 1 
;                                // f f f f 

;                                // 0 3 2 1 
;                                // f f f f 

;                                // assign r1
move 0 r1
move r1 enough
;                                // Make clean r1
;                                // 1 0 3 2 
;                                // f f f f 

label label0_start
;                                // 1 0 3 2 
;                                // f f f f 

;                                // assign r2
move 1 r2
cmpi enough r2
jeq label0_end
;                                // 2 1 0 3 
;                                // f f f f 

;                                // assign r3
move count r3
;                                // 3 2 1 0 
;                                // f f f f 

;                                // assign r0
move 1 r0
;                                // Make clean r0
;                                // 0 3 2 1 
;                                // f f f f 

addi r0 r3
;                                // 0 3 2 1 
;                                // f f f f 

;                                //DIRTY r3
;                                // 1 4 3 0 
;                                // f f f t 

move r3 count
;                                // Make clean r3
;                                // 1 4 3 0 
;                                // f f f f 

;                                // 1 4 3 0 
;                                // f f f f 

;                                // assign r1
move 0.5 r1
;                                // 2 0 4 1 
;                                // f f f f 

;                                // assign r2
move approx r2
;                                // 3 1 0 2 
;                                // f f f f 

;                                // assign r0
move num r0
divr approx r0
;                                // 0 2 1 3 
;                                // f f f f 

;                                //DIRTY r0
;                                // 0 3 2 4 
;                                // t f f f 

;                                // Make clean r0
;                                // 0 3 2 4 
;                                // f f f f 

addr r0 r2
;                                // 0 3 2 4 
;                                // f f f f 

;                                //DIRTY r2
;                                // 1 4 0 5 
;                                // f f t f 

;                                // Make clean r2
;                                // 1 4 0 5 
;                                // f f f f 

mulr r2 r1
;                                // 1 4 0 5 
;                                // f f f f 

;                                //DIRTY r1
;                                // 2 0 1 6 
;                                // f t f f 

move r1 newapprox
;                                // Make clean r1
;                                // 2 0 1 6 
;                                // f f f f 

;                                // 2 0 1 6 
;                                // f f f f 

;                                // assign r3
move approx r3
subr newapprox r3
;                                // 3 1 2 0 
;                                // f f f f 

;                                //DIRTY r3
;                                // 4 2 3 0 
;                                // f f f t 

move r3 diff
;                                // Make clean r3
;                                // 4 2 3 0 
;                                // f f f f 

;                                // 4 2 3 0 
;                                // f f f f 

;                                // assign r0
move 0.0 r0
cmpr diff r0
jle label1_else
;                                // 0 3 4 1 
;                                // f f f f 

;                                // assign r2
move tolerance r2
cmpr diff r2
jge label2_else
;                                // 1 4 0 2 
;                                // f f f f 

;                                // assign r1
move 1 r1
move r1 enough
;                                // Make clean r1
;                                // 2 0 1 3 
;                                // f f f f 

jmp label2_end
label label2_else
label label2_end
jmp label1_end
label label1_else
;                                // 2 0 1 3 
;                                // f f f f 

;                                // assign r3
move 0.0 r3
subr tolerance r3
;                                // 3 1 2 0 
;                                // f f f f 

;                                //DIRTY r3
;                                // 4 2 3 0 
;                                // f f f t 

cmpr diff r3
jle label3_else
;                                // 4 2 3 0 
;                                // f f f t 

;                                // assign r0
move 1 r0
move r0 enough
;                                // Make clean r0
;                                // 0 3 4 1 
;                                // f f f t 

jmp label3_end
label label3_else
label label3_end
label label1_end
;                                // 0 3 4 1 
;                                // f f f t 

;                                // assign r2
move newapprox r2
move r2 approx
jmp label0_start
label label0_end
sys writer approx
sys writei count
end
