;IR code
;LABEL factorial
;LINK
;STOREI 1 $T1
;NE $P1 $T1 label0_else
;STOREI 1 $T2
;STOREF $T2 $R
;RET
;JUMP label0_end
;LABEL label0_else
;STOREI 1 $T3
;SUBI $P1 $T3 $T4
;PUSH
;PUSH $T4
;JSR factorial
;POP
;POP $T5
;STOREI $T5 $L1
;MULTI $L1 $P1 $T6
;STOREI $T6 $L2
;LABEL label0_end
;STOREF $L2 $R
;RET
;LABEL main
;LINK
;WRITES input
;READI $L1
;STOREI 1 $T1
;NE $L1 $T1 label1_else
;STOREI 1 $T2
;STOREI $T2 $L2
;JUMP label1_end
;LABEL label1_else
;LABEL label1_end
;STOREI 1 $T3
;LE $L1 $T3 label2_else
;PUSH
;PUSH $L1
;JSR factorial
;POP
;POP $T4
;STOREI $T4 $L2
;JUMP label2_end
;LABEL label2_else
;STOREI 0 $T5
;STOREI $T5 $L2
;LABEL label2_end
;WRITEI $L2
;WRITES eol
;STOREI 0 $T6
;STOREF $T6 $R
;RET
;tiny code
str input "Please enter an integer number: "
str eol "\n"
push
push r0
push r1
push r2
push r3
jsr main
sys halt
label factorial
link 2
;                                // 0 0 0 0 
;                                // f f f f 

;                                // assign r0
move 1 r0
cmpi $6 r0
jne label0_else
;                                // 0 1 1 1 
;                                // f f f f 

;                                // assign r1
move 1 r1
move r1 r0
move r0 $7
unlnk
ret
jmp label0_end
label label0_else
;                                // 1 0 2 2 
;                                // f f f f 

;                                // assign r2
move $6 r2
;                                // 2 1 0 3 
;                                // f f f f 

;                                // assign r3
move 1 r3
;                                // Make clean r3
;                                // 3 2 1 0 
;                                // f f f f 

subi r3 r2
;                                // 3 2 1 0 
;                                // f f f f 

;                                //DIRTY r2
;                                // 4 3 0 1 
;                                // f f t f 

push
push r2
push r0
push r1
push r2
push r3
jsr factorial
pop r3
pop r2
pop r1
pop r0
pop
;                                // 4 3 0 1 
;                                // f f t f 

;                                // assign r0
pop r0
move r0 $-1
;                                // Make clean r0
;                                // 0 4 1 2 
;                                // f f t f 

;                                // 0 4 1 2 
;                                // f f t f 

;                                // assign r1
move $-1 r1
muli $6 r1
;                                // 1 0 2 3 
;                                // f f t f 

;                                //DIRTY r1
;                                // 2 0 3 4 
;                                // f t t f 

move r1 $-2
;                                // Make clean r1
;                                // 2 0 3 4 
;                                // f f t f 

label label0_end
move $-2 r0
move r0 $7
unlnk
ret
label main
link 2
sys writes input
sys readi $-1
;                                // 0 0 0 0 
;                                // f f f f 

;                                // assign r0
move 1 r0
cmpi $-1 r0
jne label1_else
;                                // 0 1 1 1 
;                                // f f f f 

;                                // assign r1
move 1 r1
move r1 $-2
;                                // Make clean r1
;                                // 1 0 2 2 
;                                // f f f f 

jmp label1_end
label label1_else
label label1_end
;                                // 1 0 2 2 
;                                // f f f f 

;                                // assign r2
move 1 r2
cmpi $-1 r2
jle label2_else
push
push $-1
push r0
push r1
push r2
push r3
jsr factorial
pop r3
pop r2
pop r1
pop r0
pop
;                                // 2 1 0 3 
;                                // f f f f 

;                                // assign r3
pop r3
move r3 $-2
;                                // Make clean r3
;                                // 3 2 1 0 
;                                // f f f f 

jmp label2_end
label label2_else
;                                // 3 2 1 0 
;                                // f f f f 

;                                // assign r0
move 0 r0
move r0 $-2
;                                // Make clean r0
;                                // 0 3 2 1 
;                                // f f f f 

label label2_end
sys writei $-2
sys writes eol
;                                // 0 3 2 1 
;                                // f f f f 

;                                // assign r1
move 0 r1
move r1 r0
move r0 $6
unlnk
ret
end
